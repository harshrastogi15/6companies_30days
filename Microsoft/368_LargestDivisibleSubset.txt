class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {

        int flag=1;
        sort(nums.begin(),nums.end());
        if(nums[0]==1){
            flag=0;
        }
        else{
            nums.push_back(1);
            flag=1;
        }
        sort(nums.begin(),nums.end());
        vector<int> ans;
        int n=nums.size();
        int dp[n+1][2];
        for(int i=n-1;i>=0;i--){
            dp[i][0]=0;
            dp[i][1]=i;
            for(int j=i+1;j<n;j++){
                if(nums[j]%nums[i]==0){
                    if(dp[i][0]<dp[j][0]){
                        dp[i][0]=dp[j][0];
                        dp[i][1]=j;
                    }
                }
            }
            dp[i][0]++;
            // cout<<i<<" "<<dp[i][0]<<" "<<dp[i][1]<<"\n";
        }
        int i=0;
        ans.push_back(nums[i]);
        while(dp[i][1]!=i){
            cout<<nums[i]<<"\n";
            i=dp[i][1];
            ans.push_back(nums[i]);
            
        }
        if(flag==1){
            ans.erase(ans.begin());
        }

        return ans;
    }
};